@ngdoc overview
@name Overview
@description

# envoy

Highly flexible form validation messaging for AngularJS

**envoy** ([Bower](http://bower.io/search/?q=angular-envoy),
[npm](https://www.npmjs.com/package/angular-envoy); module `fv.envoy`) is an
alternative to the [`ngMessages`](https://docs.angularjs.org/api/ngMessages)
module offered by [AngularJS](https://angularjs.org).

## Features

Use **envoy** if `ngMessages` just won't cooperate.

- **Easily configurable messaging for form validation**: Avoid complexity of
`ngSwitch`, `ngIf`, and `ngShow` directives to display error messages.
- **Errorlevels!  Errorlevels!!!** Define validation tokens as
"errors" or "warnings" (or user-defined values) on a per-field basis.  For
example, you may want to simply *warn* a user that the text input field has
a lot of characters.
- **Form Proxies**: Indicate invalid forms anywhere on the page.  For
example, if you have a list of items with dynamic forms for each, you can
easily highlight the *list item itself* if the form is invalid, even if that
list is outside of the form's Scope.
- **Accessible hooks**: Disable the "submit" button if an "error" is present,
but allow submission if the form simply has a "warning".
- **External message storage**: Store your messages in an external `.json`
file, organized by form and control name&mdash;don't hardcode them in the view.
- **Unique directive for message display**: Want to display the errors
somewhere else?  Do that.  Want them displayed all over the damn place?
Be my guest.
- **Nested form support**: Display error messaging from child forms on the
parent form's display; you don't need to have one display per form.
- **Actionable error messages**: Execute an AngularJS expression when a user
clicks on an error message in the display.
- **Dynamic form support**: Form names dynamically generated (AngularJS
1.3+)?  No problem.  Give them aliases, and it's business as usual.
- **Performant**: Message retrieval is cached.  Only the relevant forms are
updated on validity change.  No uncessary watches or digest loops.
- **`ui-router` support**: Invalid forms within nested views remain indicated
in the message display even if the form leaves the DOM.
- **Custom display**: Don't use the included template; use your own.
- ~~**Does naughty things to `FormController`**:  Err...nevermind.~~

## Basic Usage

To show error messaging for the `firstname` and `lastname` fields of your form
`myForm`, try the following:

### JavaScript

```js
// enable the module
angular.module('myModule', ['fv.envoy'])
  .config(function ($envoyProvider) {
    $envoyProvider.options({
      // an example template is included in partials/messages.html
      templateUrl: '/path/to/envoy-list/template.html',
      // TODO: provide example JSON file
      dataFileUrl: '/path/to/messages.json'
    });
  });
```

### JSON

```json
{
  "myForm": {
    "firstname": {
      "required": {
        "level": "error",
        "message": "First name is required!"
      },
      "minlength": {
        "level": "warning",
        "message": "Your first name is pretty short."
      }
    },
    "lastname": {
      "required": {
        "level": "error",
        "message": "Last name is required!" 
      },
      "minlength": {
        "level": "warning",
        "message": "Your last name is pretty short."
      }
    }
  }
}
```

### HTML

```html
<!-- the name attribute is required for any forms you wish to use, as well as 
     form controls -->
<form name="myForm" envoy-messages>
  <envoy-list><!-- messaging appears here --></envoy-list>
  <!-- save some cycles on these two by using ngModelOptions' debounce
       see https://docs.angularjs.org/api/ng/directive/ngModelOptions -->
  <input type="text" name="firstname" required minlength="2" ng-model="user.firstname"/>
  <input type="text" name="lastname" required minlength="2" ng-model="user.lastname"/> 
</form> 
```

## API Documentation

[http://decipherinc.github.io/angular-envoy/#/api](http://decipherinc.github.io/angular-envoy/#/api)

## Installation

### Via Bower

For plain-jane front-end development:

```shell
$ bower install angular-envoy
```

### Via npm

For use with Browserify, for example:

```shell
$ npm install angular-envoy
```

## Production Dependencies

- [lodash](https://www.npmjs.com/package/lodash) `>= v3.0.0 && < v4.0.0`
- [debug](http://www.npmjs.com/package/debug) `>= v2.0.0 && < v3.0.0`

## Author

[Christopher Hiller](https://github.com/boneskull)

## License

MIT

