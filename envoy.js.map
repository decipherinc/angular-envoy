{"version":3,"sources":["node_modules/grunt-browserify/node_modules/browserify/node_modules/browser-pack/_prelude.js","index.js","lib/index.js","lib/form-decorator.js","lib/directives/index.js","lib/envoy/index.js","node_modules/debug/browser.js","lib/directives/action.js","lib/directives/list.js","lib/directives/proxy.js","lib/envoy/opts.js","lib/envoy/factory.js","lib/directives/messages/index.js","lib/directives/messages/messages.js","lib/directives/messages/messages-ctrl.js","lib/directives/messages/viewdata.js"],"names":["module","exports","require","config","$provide","decorator","debug","angular","window","global","_","directives","MODULE_NAME","envoy","$inject","provider","each","directive","name","formDecorator","$delegate","MessagesFormController","$element","$attrs","$scope","$animate","$interpolate","$injector","$envoy","$setValidity","invoke","formController","this","$isForm","$name","extend","$alias","alias","$formScope","$$lastErrorSize","token","value","control","isNotForm","formHasControl","has","apply","arguments","size","$error","$broadcast","form","first","controller","envoyAction","envoyMessages","envoyList","envoyProxy","opts","envoyProvider","options","newOpts","$get","action","restrict","link","scope","element","attrs","ctrls","ngModel","messageAction","setAction","$eval","list","templateUrl","parent","findParentCtrl","bindView","$on","unbindView","proxy","TOKEN","target","formProxy","addClass","evt","data","isInvalid","find","forms","ERRORLEVELS","errorlevel","errorLevelName","removeClass","errorLevel","DEFAULT_HIDE_DELAY","DEFAULT_LEVELS","description","DEFAULT_DATA_FILE","DEFAULT_LEVEL","levels","defaultLevel","dataFile","hideDelay","envoyFactory","$http","$q","result","_cache","when","get","cache","then","res","messages","mapValues","controlMsgOptions","controlMsgName","formControl","error","pick","keys","tokenInfo","getAction","identity","LEVEL_ARRAY","pluck","LEVELS","invert","parseInt","actions","prototype","level","isString","formErrorLevel","Error","formMessages","_formErrorLevel","defaultLevelNum","maxLevel","reduce","controlMsgOpts","maxControlLevel","tokenOpts","tokenName","map","max","Math","_lastControl","_lastControlError","parentForm","broadcasting","broadcast","debounce","hierarchy","unshift","$$parentForm","all","pileOfMessages","maxErrorLevel","idx","$errorLevel","isNumber","omit","isEmpty","BROADCAST_DEBOUNCE_MS","bind","formName","controlName","formActions","format","$form","viewData","$viewData","className","title","MessagesCtrl","view","parentName","Object","defineProperties","set","$parent","$view","call","reset","id","uniqueId","ID_PREFIX"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nmodule.exports = require('./lib');\n","'use strict';\n\nvar angular = (typeof window !== \"undefined\" ? window.angular : typeof global !== \"undefined\" ? global.angular : null),\n  _ = (typeof window !== \"undefined\" ? window._ : typeof global !== \"undefined\" ? global._ : null),\n  directives = require('./directives');\n\nvar MODULE_NAME = 'fv.envoy',\n  debug = require('debug')('envoy'),\n  envoy;\n\nfunction config($provide) {\n  $provide.decorator('ngFormDirective', require('./form-decorator'));\n  debug('Configured envoy');\n}\nconfig.$inject = ['$provide'];\n\nenvoy = angular.module(MODULE_NAME, [])\n  .config(config)\n  .provider('$envoy', require('./envoy'));\n\n_.each(directives, function (directive, name) {\n  envoy.directive(name, directive);\n});\n\nmodule.exports = envoy;\n\n","'use strict';\n\nvar _ = (typeof window !== \"undefined\" ? window._ : typeof global !== \"undefined\" ? global._ : null);\n\nvar debug = require('debug')('envoy:formDecorator');\n\n/**\n * This decorator monkeypatches the controller property of the ngForm\n * directive.\n * For some reason when you decorate a directive, $delegate is an Array\n * and the first element is the directive.\n * @param {Array} $delegate Directive(s) associated with tag \"form\", I guess\n * @returns {Array} Decorated array of directives?\n */\nfunction formDecorator($delegate) {\n\n  /**\n   * The real form directive.\n   * @type {form}\n   */\n  var form = _.first($delegate),\n\n    /**\n     * Original FormController.\n     * @type {form.FormController}\n     */\n    formController = form.controller;\n\n  /**\n   * We're monkeypatching FormController with this, if and only if\n   * the form has a name.\n   * @constructor\n   */\n  function MessagesFormController($element,\n    $attrs,\n    $scope,\n    $animate,\n    $interpolate,\n    $injector,\n    $envoy) {\n\n    // my kingdom for \"let\"\n    var $setValidity;\n\n    $injector.invoke(formController, this, {\n      $element: $element,\n      $scope: $scope,\n      $animate: $animate,\n      $interpolate: $interpolate,\n      $attrs: $attrs\n    });\n\n    /**\n     * This is a form.  This comes in handy, because NgModelController\n     * and FormController are very similar.\n     * @type {boolean}\n     */\n    this.$isForm = true;\n\n    if (this.$name) {\n\n      /**\n       * This FormController's original $setValidity() method\n       * @type {form.FormController#$setValidity}\n       */\n      $setValidity = this.$setValidity;\n\n      debug('Instantiating patched controller for form %s',\n        this.$name);\n\n      _.extend(this, {\n\n        /**\n         * If this form contains an \"alias\" attribute, we'll use it\n         * to look up messages.  This is useful if your form name is\n         * dynamic (interpolated).  Note interpolated form names were\n         * not implemented before AngularJS 1.3.0.\n         * Defaults to whatever the name of the form is.\n         * @type {string}\n         */\n        $alias: $attrs.alias || this.$name,\n\n        /**\n         * This form's Scope.  This will allow us to easily broadcast\n         * events within it.\n         * @type {ng.$rootScope.Scope}\n         */\n        $formScope: $scope,\n\n        /**\n         * Used to track this form's error state.  We'll need to\n         * do stuff if the state changes.\n         * @type {number}\n         */\n        $$lastErrorSize: 0,\n\n        /**\n         * If the number of errors in this form has increased or decreased\n         * and the control being set valid or invalid is a member of this\n         * form proper, then tell $envoy to broadcast an event that\n         * the form's validity changed (somewhat).\n         * @this FormController\n         */\n        $setValidity: function $envoySetValidity(token,\n          value,\n          control) {\n\n          /**\n           * If we set $isForm above, this is a subform of the parent\n           * and we don't care.\n           * @todo maybe we do care?\n           * @type {boolean}\n           */\n          var isNotForm = !control.$isForm,\n\n            /**\n             * We only care about controls that were explicitly added\n             * to this form.\n             * @type {boolean}\n             */\n            formHasControl = isNotForm && _.has(this, control.$name);\n\n          $setValidity.apply(this, arguments);\n\n          if (formHasControl &&\n            _.size(this.$error) !== this.$$lastErrorSize) {\n            $envoy.$broadcast(this, control);\n            this.$$lastErrorSize = _.size(this.$error);\n          }\n        }\n      });\n\n      // see the note below at formDirective.$scope\n      if (!_.has($scope, this.$alias)) {\n        $scope[this.$alias] = this;\n      }\n    }\n  }\n  MessagesFormController.$inject = [\n    '$element',\n    '$attrs',\n    '$scope',\n    '$animate',\n    '$interpolate',\n    '$injector',\n    '$envoy'\n  ];\n\n  form.controller = MessagesFormController;\n\n  /**\n   * So this is a little hack.  I'm pretty sure this is not dangerous, but\n   * it could be.  The reason for this is that you may have a dynamic form\n   * name; something interpolated.  Say, \"myForm-2789618\".  A FormController\n   * will always place itself on the scope if it's given a name.  But it's\n   * also handy to be able to reference \"myForm\".  If form \"myForm-87329\"\n   * shared the same scope with \"myForm-2789618\", only one \"myForm\" could\n   * exist; thus, we just make a new scope.\n   * @type {boolean}\n   */\n  form.$scope = true;\n\n  return $delegate;\n}\nformDecorator.$inject = ['$delegate'];\n\nmodule.exports = formDecorator;\n","'use strict';\n\nmodule.exports = {\n  'envoyAction': require('./action'),\n  'envoyMessages': require('./messages'),\n  'envoyList': require('./list'),\n  'envoyProxy': require('./proxy')\n};\n","'use strict';\n\nvar opts = require('./opts'),\n  _ = (typeof window !== \"undefined\" ? window._ : typeof global !== \"undefined\" ? global._ : null);\n\n/**\n *\n */\nvar envoyProvider = function envoyProvider() {\n\n  /**\n   * Set options during config phase\n   * @param {Object} [newOpts] New options to assign onto defaults\n   * @returns {Object}\n   */\n  this.options = function options(newOpts) {\n    return _.extend(opts, newOpts);\n  };\n\n  this.$get = require('./factory');\n\n};\n\nmodule.exports = envoyProvider;\n","module.exports = function() {};","'use strict';\n\n/**\n * Describes a directive wherein you can supply an action (AngularJS\n * expression) to be executed from the message list view, for a particular\n * control.  In practice, you use this to activate a control to correct\n * an error when the message list displays a problem w/ yr control.\n * @example\n * <input name=\"title\"\n *        type=\"text\"\n *        ng-model=segment.title\"\n *        message-action=\"edit(segment)\"/>\n */\nfunction action($envoy) {\n\n  return {\n    restrict: 'A',\n    require: ['ngModel', '^form'],\n    link: function (scope, element, attrs, ctrls) {\n      var ngModel = ctrls[0],\n        form = ctrls[1],\n        action;\n\n      if ((action = attrs.messageAction) && ngModel.$name && form.$name) {\n        $envoy.setAction(form.$name, ngModel.$name, function () {\n          scope.$eval(action);\n        });\n      }\n    }\n  };\n}\naction.$inject = ['$envoy'];\n\nmodule.exports = action;\n","'use strict';\n\nvar opts = require('../envoy/opts');\n\n/**\n * Defines a directive which will display a list of all messages\n * for a form.\n * The form does not have to be the direct parent of this directive.\n * @example\n * <div messages-list=\"configForm\"></div>\n * <!-- or -->\n * <messages-list for=\"configForm\"></messages-list>\n */\nfunction list($envoy) {\n  return {\n    restrict: 'EA',\n    scope: true,\n    require: ['^envoyMessages'],\n    templateUrl: opts.templateUrl,\n    link: function (scope, element, attrs, envoy) {\n      var parent = $envoy.findParentCtrl(attrs.envoyList ||\n        attrs.for, envoy);\n\n      parent.bindView(scope);\n\n      scope.$on('$destroy', function () {\n        parent.unbindView();\n      });\n    }\n  };\n}\nlist.$inject = ['$envoy'];\n\nmodule.exports = list;\n","'use strict';\n\nvar _ = (typeof window !== \"undefined\" ? window._ : typeof global !== \"undefined\" ? global._ : null);\n\n/**\n * @ngdoc directive\n * @description\n * Defines a directive which, when used with ngModel, will set the validity\n * of the associated NgModelController, based on the validity of the target\n * form.\n */\nfunction proxy($envoy) {\n\n  /**\n   * Anything that needs validating needs a token, so, here's one.\n   * @type {string}\n   */\n  var TOKEN = 'proxy';\n\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: function (scope, element, attrs, ngModel) {\n      var target;\n      if ((target = attrs.formProxy)) {\n        element.addClass('errorlevel');\n\n        scope.$on('$formStateChanged', function (evt, data) {\n          var isInvalid;\n          if (_.find(data.forms, { $name: target })) {\n            _.each($envoy.ERRORLEVELS,\n              function (errorlevel, errorLevelName) {\n                element.removeClass(errorLevelName);\n              });\n            isInvalid = data.errorLevel;\n            ngModel.$setValidity(TOKEN, isInvalid);\n            if (isInvalid) {\n              element.addClass(data.errorLevelName);\n            }\n          }\n        });\n      }\n    }\n  };\n};\nproxy.$inject = ['$envoy'];\n\nmodule.exports = proxy;\n","'use strict';\n\n/**\n * This number (in ms) needs to be higher than however long it takes to\n * hide any display generated by the `messagesList` directive.\n * @type {number}\n */\nvar DEFAULT_HIDE_DELAY = 900,\n\n  /**\n   * Default level and descriptions\n   * @type {Array.<Object.<string, string>>}\n   */\n  DEFAULT_LEVELS = [\n    {\n      name: 'ok',\n      description: 'Fixed!'\n    },\n    {\n      name: 'warning',\n      description: 'Warning'\n    },\n    {\n      name: 'error',\n      description: 'Error'\n    }\n  ],\n\n  /**\n   * Default web server path to JSON message definition file\n   * @type {string}\n   */\n  DEFAULT_DATA_FILE = 'messages.json',\n\n  /**\n   * The default level\n   * @type {string}\n   */\n  DEFAULT_LEVEL = 'ok';\n\nmodule.exports = {\n  levels: DEFAULT_LEVELS,\n  defaultLevel: DEFAULT_LEVEL,\n  dataFile: DEFAULT_DATA_FILE,\n  hideDelay: DEFAULT_HIDE_DELAY,\n  templateUrl: 'partials/messages.html'\n};\n\n","'use strict';\n\nvar _ = (typeof window !== \"undefined\" ? window._ : typeof global !== \"undefined\" ? global._ : null),\n  opts = require('./opts');\n\nvar BROADCAST_DEBOUNCE_MS = 250;\n\nfunction envoyFactory($http, $q) {\n\n  /**\n   * Error levels as configured in opts in order, by name\n   * @type {Array.<string>}\n   */\n  var LEVEL_ARRAY = _.pluck(opts.levels, 'name'),\n\n    /**\n     * Mapping of error level names to indices in {@link LEVEL_ARRAY}\n     * @type {Object.<string,number>}\n     */\n    LEVELS = _(LEVEL_ARRAY)\n      .invert()\n      .mapValues(_.parseInt)\n      .value(),\n\n    /**\n     * Lookup of forms and controls to any actions bound via the\n     * messageAction directive.  An action is simply an AngularJS\n     * expression which will be evaluated.\n     * @type {Object.<string,Object.<string,string>>}\n     */\n    actions = {};\n\n    /**\n     * Retrieves a collection of messages for a form and/or control\n     * within that form.  If no parameters, returns the entirety of the\n     * data file.\n     * @param {FormController} form Form controller\n     * @returns {*} Value, if any\n     */\n    function $envoy(form) {\n      var result;\n      if ((result = $envoy._cache[form.$name])) {\n        return $q.when(result);\n      }\n      return $http.get(opts.dataFile, {\n        cache: true\n      })\n        .then(function (res) {\n\n          /**\n           * Entirety of the data file\n           * @type {Object}\n           */\n          var messages = res.data;\n\n          if (form) {\n            // If the form has an alias (use the \"alias\" directive),\n            // this name takes precedence.\n            messages = _(messages[form.$alias || form.$name])\n              // here we pick only the controls that are invalid.\n              .mapValues(function (controlMsgOptions, controlMsgName) {\n                var formControl = form[controlMsgName],\n                // if this is truthy, then we have errors in the given\n                // control\n                  error = formControl && _.size(formControl.$error);\n\n                if (formControl && error) {\n                  // get the problem tokens and grab any actions\n                  // if present.  actions are assigned at the control\n                  // level, but we don't have granular control over\n                  // which validation token triggers which action.\n                  // so, if there were two problems with one control,\n                  // both tokens would receive the action prop.\n                  return _(controlMsgOptions)\n                    .pick(_.keys(formControl.$error))\n                    .each(function (tokenInfo) {\n                      tokenInfo.action =\n                        $envoy.getAction(form.$name, controlMsgName);\n                    })\n                    .value();\n\n                }\n              })\n              .pick(_.identity)\n              .value();\n          }\n\n          $envoy._cache[form.$name] = messages;\n\n          return messages;\n        });\n    }\n\n  var prototype = {\n\n    _cache: {},\n\n    /**\n     * Utility function to convert an error level into a number or\n     * string\n     * @param {(number|string)} [errorLevel] Error level, or default\n     *     level\n     * @returns {(number|string)} Corresponding string/number\n     */\n    level: function level(errorLevel) {\n      return _.isString(errorLevel) ?\n      LEVELS[errorLevel] || LEVELS[opts.defaultLevel] :\n      LEVEL_ARRAY[errorLevel] || opts.defaultLevel;\n    },\n\n    /**\n     * Given a `FormController`, calculate the maximum error level\n     * for its controls which are invalid.\n     * @param {FormController} form form to inspect\n     * @returns {Promise.<string>} Level name\n     * @throws if no FormController passed\n     */\n    formErrorLevel: function formErrorLevel(form) {\n      if (!form) {\n        throw new Error('parameter is required');\n      }\n      return $envoy(form)\n        .then(function (formMessages) {\n          return $envoy._formErrorLevel(form, formMessages);\n        });\n    },\n\n    _formErrorLevel: function _formErrorLevel(form, formMessages) {\n      /**\n       * Index of the default error level\n       * @type {number}\n       */\n      var defaultLevelNum = LEVELS[opts.defaultLevel],\n\n        /**\n         * Maximum error level of all validation tokens within all\n         * controls of this form\n         * @type {number}\n         */\n        maxLevel = _.reduce(formMessages,\n          function (result, controlMsgOpts) {\n\n            /**\n             * Maximum error level of any validation token within\n             * the control which is in \"invalid\" state.\n             * @type {number}\n             */\n            var maxControlLevel = _(controlMsgOpts)\n              .pick(function (tokenOpts, tokenName) {\n                return form.$error[tokenName];\n              })\n              .pluck('level')\n              .map($envoy.level)\n              .max();\n\n            return Math.max(result, maxControlLevel);\n          },\n          defaultLevelNum);\n\n      return LEVEL_ARRAY[maxLevel];\n    },\n\n    _lastControl: null,\n    _lastControlError: null,\n    $broadcast: function $broadcast(form, control) {\n      var parentForm = form,\n        broadcasting = null,\n        broadcast = _.debounce(function broadcast() {\n          var hierarchy = [];\n\n          hierarchy.unshift(parentForm);\n          while (parentForm.$$parentForm &&\n          parentForm.$$parentForm.$name) {\n            parentForm = parentForm.$$parentForm;\n            hierarchy.unshift(parentForm);\n          }\n\n          broadcasting = $q.all(_.map(hierarchy, $envoy))\n            .then(function (pileOfMessages) {\n              var defaultLevel = LEVELS[opts.defaultLevel],\n                messages = {},\n                maxErrorLevel = _.reduce(pileOfMessages,\n                  function (result, formMessages, idx) {\n                    var form = hierarchy[idx],\n                      errorLevelName = $envoy._formErrorLevel(form,\n                        formMessages),\n                      errorLevel = LEVELS[errorLevelName];\n\n                    form.$errorLevel = errorLevel;\n                    messages[form.$name] = formMessages;\n                    return _.isNumber(errorLevel) ?\n                      Math.max(result,\n                        errorLevel) :\n                      result;\n                  },\n                  defaultLevel);\n\n              parentForm.$formScope.$broadcast('$formStateChanged',\n                {\n                  errorLevel: maxErrorLevel,\n                  errorLevelName: LEVEL_ARRAY[maxErrorLevel],\n                  messages: _.omit(messages, _.isEmpty),\n                  forms: hierarchy,\n                  control: control\n                });\n\n              $envoy._lastControl = control;\n              $envoy._lastControlError = _.keys(control.$error);\n            });\n\n        }, BROADCAST_DEBOUNCE_MS);\n\n      delete $envoy._cache[form.$name];\n\n      if (broadcasting) {\n        return broadcasting.then($envoy.$broadcast.bind(null,\n          form,\n          control));\n      }\n\n      return $q.when(broadcast());\n\n    },\n\n    /**\n     * Set an action to be executed at some point.  Used by the\n     * envoyList directive's view, so that you can click on an\n     * error and be taken to where the error is.\n     * @todo make controlName optional?\n     * @param {string} formName Name of form\n     * @param {string} controlName Name of control\n     * @param {string} action AngularJS expression to evaluate\n     */\n    setAction: function setAction(formName, controlName, action) {\n      var formActions = actions[formName] = actions[formName] || {};\n      formActions[controlName] = action;\n    },\n\n    /**\n     * Gets a stored action.\n     * @param {string} formName Name of form for action\n     * @param {string} controlName Name of control for action\n     * @returns {(string|undefined)} The action (AngularJS\n     *     expression), if it exists.\n     */\n    getAction: function getAction(formName, controlName) {\n      return _.get(actions, _.format('%s.%s', formName, controlName));\n    },\n\n    /**\n     * Utility function to get a parent envoy directive.\n     * @param {string} formName Find the messagesDirectiveCtrl\n     *     attached to form with this name\n     * @param {MessagesCtrl} envoyMessages Current\n     *     messagesDirectiveCtrl\n     * @returns {MessagesCtrl}\n     */\n    findParentCtrl: function findParentCtrl(formName, envoyMessages) {\n      while (envoyMessages.$form.$name !== formName) {\n        envoyMessages = envoyMessages.parent;\n        if (!envoyMessages) {\n          throw new Error('cannot find parent with name ' + formName);\n        }\n      }\n      return envoyMessages;\n    },\n\n    /**\n     * Exposed for handiness\n     * @type {string}\n     */\n    DEFAULT_LEVEL: opts.defaultLevel,\n\n    /**\n     * Exposed for handiness.  The kinder, gentler version of\n     * opts.levels\n     * @type {Object.<string,number>}\n     */\n    ERRORLEVELS: LEVELS,\n\n    /**\n     * Exposed for handiness\n     * @type {Array.<Object.<string,string>>}\n     */\n    LEVELS: opts.levels,\n\n    opts: opts\n\n  };\n\n  _.extend($envoy, prototype);\n\n  return $envoy;\n}\nenvoyFactory.$inject = ['$http', '$q'];\n\nmodule.exports = envoyFactory;\n","'use strict';\n\nmodule.exports = require('./messages');\n","'use strict';\n\n/**\n * @ngdoc directive\n * @name fv.envoy.directive:envoyMessages\n * @requires fv.envoy.service:$envoy\n * @restrict AE\n * @param {string} [parent] If this directive is in a subform of some other\n * form which is *also* using the `messages` directive, and you wish to\n * display messages within its view, specify its form here.\n * @description\n * Enables display of messages for a form.\n */\n\n/**\n *\n *\n */\nfunction messages($envoy) {\n  return {\n    restrict: 'AE',\n    require: 'envoyMessages',\n    controller: require('./messages-ctrl'),\n    scope: true,\n    link: function link(scope, element, attrs, messages) {\n      scope.$on('$formStateChanged', function (evt, data) {\n        var viewData = messages.$viewData;\n        if (!viewData) {\n          return;\n        }\n        viewData.messages = data.messages;\n        viewData.error = !!data.errorLevel;\n        viewData.className = data.errorLevelName;\n        viewData.title = $envoy.LEVELS[data.errorLevel].description;\n      });\n    }\n  };\n};\n\nmessages.$inject = ['$envoy'];\n\nmodule.exports = messages;\n","'use strict';\n\nvar _ = (typeof window !== \"undefined\" ? window._ : typeof global !== \"undefined\" ? global._ : null),\n  viewData = require('./viewdata');\n\nfunction MessagesCtrl($element,\n  $envoy,\n  $attrs,\n  $scope,\n  $interpolate) {\n\n  var view;\n\n  /**\n   * Bind a view Scope to this directive for display.  Used by\n   * `messagesList` directive.\n   * @param {ng.$rootScope.Scope} scope\n   * @returns {MessagesCtrl} This controller\n   */\n  this.bindView = function bindView(scope) {\n    if (view.scope) {\n      throw new Error('view already bound!');\n    }\n    view.scope = scope;\n    scope.data = viewData($envoy.DEFAULT_LEVEL);\n\n    return this;\n  };\n\n  /**\n   * Unbind the bound Scope of this controller.\n   * @returns {MessagesCtrl} This controller\n   */\n  this.unbindView = function unbindView() {\n    delete view.scope;\n    return this;\n  };\n\n  /**\n   * @this MessagesCtrl\n   */\n  (function init() {\n    var parentName, form;\n\n    Object.defineProperties(this, {\n      $errorLevel: {\n        get: function getErrorLevel() {\n          return form.$errorLevel;\n        },\n        set: function setErrorLevel(value) {\n          form.$errorLevel = value;\n        }\n      },\n      $name: {\n        get: function getName() {\n          return form.$name;\n        }\n      },\n      $viewData: {\n        get: function getViewData() {\n          var data;\n          if ((data = _.get(view, 'scope.data'))) {\n            return data;\n          }\n          if (_.get(view, 'scope')) {\n            return (view.scope.data = viewData($envoy.DEFAULT_LEVEL));\n          }\n        },\n        set: function setViewData(data) {\n          view.scope.data = data;\n        }\n      }\n    });\n\n    form = this.$form = $element.controller('form');\n\n    this.$parent =\n        $attrs.parent &&\n        (parentName = $interpolate($attrs.parent)($scope)) ?\n          $envoy.findParentCtrl(parentName,\n            $element.parent().controller('messages')) :\n          null;\n\n    view =\n      this.$parent ? (this.$view = this.$parent.$view) : (this.$view = {});\n\n  }.call(this));\n}\n\nMessagesCtrl.$inject = [\n  '$element',\n  '$envoy',\n  '$attrs',\n  '$scope',\n  '$interpolate'\n];\n\nmodule.exports = MessagesCtrl;\n","'use strict';\n\nvar _ = (typeof window !== \"undefined\" ? window._ : typeof global !== \"undefined\" ? global._ : null);\n\nvar ID_PREFIX = 'envoy-viewdata-',\n  debug = require('debug')('envoy:directives:messages:viewdata');\n\nfunction viewData(defaultLevel) {\n  var data = {\n    reset: function reset() {\n      this.error = false;\n      this.messages = {};\n      this.title = null;\n      this.className = null;\n      this.errorLevel = defaultLevel;\n    },\n    id: _.uniqueId(ID_PREFIX)\n  };\n  data.reset();\n  debug('Created viewdata object with id \"%s\"', data.id);\n  return data;\n}\n\nmodule.exports = viewData;\n\n"]}